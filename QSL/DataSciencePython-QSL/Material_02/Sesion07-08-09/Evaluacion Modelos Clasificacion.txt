{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Modelos de clasificación\n",
    "## Regresión logistica - Evaluación de modelos de clasificación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "\n",
    "Image(\"imagen/breast_cancer.jpeg\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "cancer_datos = datasets.load_breast_cancer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n",
       "       1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n",
       "       0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n",
       "       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n",
       "       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n",
       "       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n",
       "       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n",
       "       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n",
       "       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n",
       "       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n",
       "       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n",
       "       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n",
       "       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n",
       "       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n",
       "       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancer_datos[\"target\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst radius</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "0        17.99         10.38          122.80     1001.0          0.11840   \n",
       "1        20.57         17.77          132.90     1326.0          0.08474   \n",
       "2        19.69         21.25          130.00     1203.0          0.10960   \n",
       "3        11.42         20.38           77.58      386.1          0.14250   \n",
       "4        20.29         14.34          135.10     1297.0          0.10030   \n",
       "\n",
       "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "0           0.27760          0.3001              0.14710         0.2419   \n",
       "1           0.07864          0.0869              0.07017         0.1812   \n",
       "2           0.15990          0.1974              0.12790         0.2069   \n",
       "3           0.28390          0.2414              0.10520         0.2597   \n",
       "4           0.13280          0.1980              0.10430         0.1809   \n",
       "\n",
       "   mean fractal dimension  ...  worst radius  worst texture  worst perimeter  \\\n",
       "0                 0.07871  ...         25.38          17.33           184.60   \n",
       "1                 0.05667  ...         24.99          23.41           158.80   \n",
       "2                 0.05999  ...         23.57          25.53           152.50   \n",
       "3                 0.09744  ...         14.91          26.50            98.87   \n",
       "4                 0.05883  ...         22.54          16.67           152.20   \n",
       "\n",
       "   worst area  worst smoothness  worst compactness  worst concavity  \\\n",
       "0      2019.0            0.1622             0.6656           0.7119   \n",
       "1      1956.0            0.1238             0.1866           0.2416   \n",
       "2      1709.0            0.1444             0.4245           0.4504   \n",
       "3       567.7            0.2098             0.8663           0.6869   \n",
       "4      1575.0            0.1374             0.2050           0.4000   \n",
       "\n",
       "   worst concave points  worst symmetry  worst fractal dimension  \n",
       "0                0.2654          0.4601                  0.11890  \n",
       "1                0.1860          0.2750                  0.08902  \n",
       "2                0.2430          0.3613                  0.08758  \n",
       "3                0.2575          0.6638                  0.17300  \n",
       "4                0.1625          0.2364                  0.07678  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancer_datos = datasets.load_breast_cancer()\n",
    "\n",
    "cancer_df = pd.DataFrame(cancer_datos[\"data\"],\n",
    "                           columns=cancer_datos[\"feature_names\"]\n",
    "                          )\n",
    "cancer_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "cancer_datos = datasets.load_breast_cancer()\n",
    "\n",
    "cancer_df = pd.DataFrame(cancer_datos[\"data\"],\n",
    "                           columns=cancer_datos[\"feature_names\"]\n",
    "                          )\n",
    "\n",
    "cancer_df[\"objetivo\"] = cancer_datos.target\n",
    "cancer_df[\"objetivo\"] = cancer_df[\"objetivo\"].replace({0:1, 1:0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "      <th>objetivo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "0        17.99         10.38          122.80     1001.0          0.11840   \n",
       "1        20.57         17.77          132.90     1326.0          0.08474   \n",
       "2        19.69         21.25          130.00     1203.0          0.10960   \n",
       "3        11.42         20.38           77.58      386.1          0.14250   \n",
       "4        20.29         14.34          135.10     1297.0          0.10030   \n",
       "\n",
       "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "0           0.27760          0.3001              0.14710         0.2419   \n",
       "1           0.07864          0.0869              0.07017         0.1812   \n",
       "2           0.15990          0.1974              0.12790         0.2069   \n",
       "3           0.28390          0.2414              0.10520         0.2597   \n",
       "4           0.13280          0.1980              0.10430         0.1809   \n",
       "\n",
       "   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
       "0                 0.07871  ...          17.33           184.60      2019.0   \n",
       "1                 0.05667  ...          23.41           158.80      1956.0   \n",
       "2                 0.05999  ...          25.53           152.50      1709.0   \n",
       "3                 0.09744  ...          26.50            98.87       567.7   \n",
       "4                 0.05883  ...          16.67           152.20      1575.0   \n",
       "\n",
       "   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n",
       "0            0.1622             0.6656           0.7119                0.2654   \n",
       "1            0.1238             0.1866           0.2416                0.1860   \n",
       "2            0.1444             0.4245           0.4504                0.2430   \n",
       "3            0.2098             0.8663           0.6869                0.2575   \n",
       "4            0.1374             0.2050           0.4000                0.1625   \n",
       "\n",
       "   worst symmetry  worst fractal dimension  objetivo  \n",
       "0          0.4601                  0.11890         1  \n",
       "1          0.2750                  0.08902         1  \n",
       "2          0.3613                  0.08758         1  \n",
       "3          0.6638                  0.17300         1  \n",
       "4          0.2364                  0.07678         1  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancer_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.627417\n",
       "1    0.372583\n",
       "Name: objetivo, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancer_df[\"objetivo\"].value_counts(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(569, 31)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancer_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En primer lugar creamos un modelo simple de Regresión Logística."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n",
       "       'mean smoothness', 'mean compactness', 'mean concavity',\n",
       "       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n",
       "       'radius error', 'texture error', 'perimeter error', 'area error',\n",
       "       'smoothness error', 'compactness error', 'concavity error',\n",
       "       'concave points error', 'symmetry error',\n",
       "       'fractal dimension error', 'worst radius', 'worst texture',\n",
       "       'worst perimeter', 'worst area', 'worst smoothness',\n",
       "       'worst compactness', 'worst concavity', 'worst concave points',\n",
       "       'worst symmetry', 'worst fractal dimension'], dtype='<U23')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancer_datos.feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = cancer_df[cancer_datos.feature_names]\n",
    "y = cancer_df[\"objetivo\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((398, 30), (569, 30), (171, 30))"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, X.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\LCM\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "modelo = LogisticRegression()\n",
    "modelo.fit(X_train, y_train)\n",
    "\n",
    "predicciones = modelo.predict(X_test)\n",
    "clases_reales = y_test\n",
    "predicciones_probabilidades = modelo.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0, 0),\n",
       " (1, 1),\n",
       " (1, 1),\n",
       " (0, 0),\n",
       " (0, 0),\n",
       " (1, 1),\n",
       " (1, 1),\n",
       " (1, 1),\n",
       " (0, 0),\n",
       " (0, 0)]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def tupla_clase_prediccion(y_real, y_pred):\n",
    "    return list(zip(y_real, y_pred))\n",
    "\n",
    "tupla_clase_prediccion(clases_reales, predicciones)[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conceptos de Clasificación binaria**\n",
    "\n",
    "En clasificación binaria, tenemos el concepto de casos negativos (clase 0, en el caso del dataset de cancer de mama serian los casos donde el cancer es benigno) y casos positivos (clase 1, en el caso del dataset de cancer de mama serían los casos donde el cancer es maligno). Positivo y negativo no significa que el resultado sea bueno o malo, simplemente que la detección de un cancer maligno se active o no.\n",
    "\n",
    "- Casos positivos: Casos donde la clase es 1 (cánceres malignos)\n",
    "- Casos negativos: Casos donde la clase es 0 (cánceres benignos)\n",
    "\n",
    "Esto nos lleva a computar 4 tipos de observaciones, explicados como ejemplos del dataset del cancer de mama.\n",
    "\n",
    "- Verdaderos Positivos(True positives), serían las imágenes con un cancer maligno que se detectan como cancer maligno.\n",
    "- Falsos Positivos (False positives), serían los cánceres benignos que se detectan como un cancer maligno.\n",
    "- Verdaderos Negativos(True Negatives), serían los canceres benignos que se clasifican como cánceres benignos.\n",
    "- Falsos Negativos(False Negatives), serían los canceres malignos que se clasifican como cánceres benignos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(\"imagen/matriz_metric.jpg\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Verdaderos Positivos: 59\n",
      "Verdaderos Negativos: 107\n",
      "Falsos Positivos: 1\n",
      "Falsos Negativos: 4\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def VP(clases_reales, predicciones):\n",
    "    par_clase_prediccion = tupla_clase_prediccion(clases_reales, predicciones)\n",
    "    return len([obs for obs in par_clase_prediccion if obs[0]==1 and obs[1]==1])\n",
    "\n",
    "def VN(clases_reales, predicciones):\n",
    "    par_clase_prediccion = tupla_clase_prediccion(clases_reales, predicciones)\n",
    "    return len([obs for obs in par_clase_prediccion if obs[0]==0 and obs[1]==0])\n",
    "    \n",
    "def FP(clases_reales, predicciones):\n",
    "    par_clase_prediccion = tupla_clase_prediccion(clases_reales, predicciones)\n",
    "    return len([obs for obs in par_clase_prediccion if obs[0]==0 and obs[1]==1])\n",
    "\n",
    "def FN(clases_reales, predicciones):\n",
    "    par_clase_prediccion = tupla_clase_prediccion(clases_reales, predicciones)\n",
    "    return len([obs for obs in par_clase_prediccion if obs[0]==1 and obs[1]==0])\n",
    "\n",
    "\n",
    "print(\"\"\"\n",
    "Verdaderos Positivos: {}\n",
    "Verdaderos Negativos: {}\n",
    "Falsos Positivos: {}\n",
    "Falsos Negativos: {}\n",
    "\"\"\".format(\n",
    "    VP(clases_reales, predicciones),\n",
    "    VN(clases_reales, predicciones),\n",
    "    FP(clases_reales, predicciones),\n",
    "    FN(clases_reales, predicciones)    \n",
    "))    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ratios de clasificación"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exactitud (Accuracy)**\n",
    "\n",
    "La exactitud es una medida general de como se comporta el modelo, mide simplemente el porcentaje de casos que se han clasificado correctamente.\n",
    "\n",
    "$$Exactitud=\\frac{Número~de~observaciones~correctamente~clasificadas}{Número~de~observaciones~totales}= \\frac{VP+VN}{VP+VN+FP+FN}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9707602339181286"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def exactitud(clases_reales, predicciones):\n",
    "    vp = VP(clases_reales, predicciones)\n",
    "    vn = VN(clases_reales, predicciones)\n",
    "    return (vp+vn) / len(clases_reales)\n",
    "\n",
    "exactitud(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9707602339181286"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "metrics.accuracy_score(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Precisión (Precission)**\n",
    "\n",
    "La precisión indica la habilidad del modelo para clasificar como positivos los casos que son positivos.\n",
    "\n",
    "$$Precisión=\\frac{Número~de~observaciones~positivas~correctamente~clasificadas}{Número~de~observaciones~clasificadas~como~positivas}= \\frac{VP}{VP+FP}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9833333333333333"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def precision(clases_reales, predicciones):\n",
    "    vp = VP(clases_reales, predicciones)\n",
    "    fp = FP(clases_reales, predicciones)\n",
    "    return vp / (vp+fp)\n",
    "\n",
    "precision(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.944291283764968"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.average_precision_score(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exhaustividad o sensibilidad(Recall o True Positive Rate)**\n",
    "\n",
    "La sensibilidad nos da una medida de la habilidad del modelo para encontrar todos los casos positivos. La sensibilidad se mide en función de una clase.\n",
    "\n",
    "$$Sensibilidad=\\frac{Número~de~observaciones~positivas~clasificadas~como~positivas}{Número~de~observaciones~positivas~totales}= \\frac{VP}{VP+FN}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9365079365079365"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def sensibilidad(clases_reales, predicciones):\n",
    "    vp = VP(clases_reales, predicciones)\n",
    "    fn = FN(clases_reales, predicciones)\n",
    "    return vp / (vp+fn)\n",
    "\n",
    "sensibilidad(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9365079365079365"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.recall_score(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Especificidad**\n",
    "\n",
    "La especificidad nos da una medida de la habilidad del modelo para encontrar todos los casos negativos. La especificidad se mide en función de una clase.\n",
    "\n",
    "$$Especificidad=\\frac{Número~de~observaciones~negativas~clasificadas~como~negativas}{Número~de~observaciones~negativas~totales}= \\frac{VN}{VN+FP}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9907407407407407"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def especificidad(clases_reales, predicciones):\n",
    "    vn = VN(clases_reales, predicciones)\n",
    "    fp = FP(clases_reales, predicciones)\n",
    "    return vn / (vn+fp)\n",
    "\n",
    "especificidad(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Matriz de confusion **\n",
    "\n",
    "La matriz de confusión es una forma muy sencilla de comparar como ha clasificado cada observación el modelo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[107,   1],\n",
       "       [  4,  59]], dtype=int64)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Puntuación F1 (F1 score)**\n",
    "\n",
    "La puntuación F1 es una media ponderada entre la sensibilidad (que intenta obtener cuantos mas verdaderos positivos independientemente de los falsos positivos) y la precisión (que intenta obtener solo verdaderos positivos que sean casos claros para limitar los falsos positivos).\n",
    "\n",
    "La puntuación F1 se define como la media harmónica de la precisión y la sensibilidad:\n",
    "\n",
    "$$F1=2*\\frac{1}{\\frac{1}{precisión}+\\frac{1}{sensibilidad}}=2*\\frac{precisión*sensibilidad}{precisión+sensibilidad}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9593495934959351"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def puntuacion_f1(clases_reales, predicciones):\n",
    "    precision_preds = precision(clases_reales, predicciones)\n",
    "    sensibilidad_preds = sensibilidad(clases_reales, predicciones)\n",
    "    return 2*(precision_preds*sensibilidad_preds)/(precision_preds+sensibilidad_preds)\n",
    "\n",
    "puntuacion_f1(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9593495934959351"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.f1_score(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Ratio de Falsos Positivos (Ratio de Falsa Alarma o FPR) **\n",
    "\n",
    "El ratio de falsos positivos nos da una medida de las probabilidades de nuestro modelo de asignar una clase positiva a un caso negativo.\n",
    "\n",
    "Se define como:\n",
    "\n",
    "$$FPR=\\frac{Número~de~observaciones~negativas~clasificadas~como~positivas}{Número~de~observaciones~totales}= \\frac{FP}{FP+TN}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.009259259259259259"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def fpr(clases_reales, predicciones):\n",
    "    return (FP(clases_reales, predicciones) / (\n",
    "             FP(clases_reales, predicciones) + VN(clases_reales, predicciones)\n",
    "             )\n",
    "           )\n",
    "fpr(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**¿Cómo clasifica un modelo?**\n",
    "\n",
    "Un modelo como la regresión lineal funciona prediciendo distancias a una \"linea de decision\" que se convierten en probabilidades para cada clase. Pero a la hora de la verdad al modelo le suele interesar sólo saber que clase predice el modelo. En general esto se hace decidiendo un umbral *(threshold)* y clasificando los casos con menor probabilidad como clase negativa y  mayor probabilidad como clase positiva."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(\"imagen/threshold.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\"clase_real\":clases_reales,\n",
    "                   \"clase_pred\": predicciones,\n",
    "                   \"probabilidades_0\":modelo.predict_proba(X_test)[:,0],\n",
    "                    \"probabilidades_1\":modelo.predict_proba(X_test)[:,1],\n",
    "                  })\n",
    "df[\"sum_probas\"] = df.probabilidades_0 + df.probabilidades_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clase_real</th>\n",
       "      <th>clase_pred</th>\n",
       "      <th>probabilidades_0</th>\n",
       "      <th>probabilidades_1</th>\n",
       "      <th>sum_probas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.861800e-01</td>\n",
       "      <td>0.013820</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>555</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.957082e-01</td>\n",
       "      <td>0.004292</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.435867e-01</td>\n",
       "      <td>0.056413</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.986897e-01</td>\n",
       "      <td>0.001310</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.550449e-01</td>\n",
       "      <td>0.044955</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.663875e-01</td>\n",
       "      <td>0.033613</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.736985e-01</td>\n",
       "      <td>0.126301</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.468709e-08</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>155</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.869448e-01</td>\n",
       "      <td>0.013055</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9.820587e-01</td>\n",
       "      <td>0.017941</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     clase_real  clase_pred  probabilidades_0  probabilidades_1  sum_probas\n",
       "165           0           0      9.861800e-01          0.013820         1.0\n",
       "555           0           0      9.957082e-01          0.004292         1.0\n",
       "209           0           0      9.435867e-01          0.056413         1.0\n",
       "404           0           0      9.986897e-01          0.001310         1.0\n",
       "109           0           0      9.550449e-01          0.044955         1.0\n",
       "245           0           0      9.663875e-01          0.033613         1.0\n",
       "89            0           0      8.736985e-01          0.126301         1.0\n",
       "565           1           1      1.468709e-08          1.000000         1.0\n",
       "155           0           0      9.869448e-01          0.013055         1.0\n",
       "464           0           0      9.820587e-01          0.017941         1.0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Como el modelo no tiene ningún motivo para elegir un umbral determinado (sólo sabe probabilidades) elige 0.5 por defecto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clase_real</th>\n",
       "      <th>clase_pred</th>\n",
       "      <th>probabilidades_0</th>\n",
       "      <th>probabilidades_1</th>\n",
       "      <th>sum_probas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [clase_real, clase_pred, probabilidades_0, probabilidades_1, sum_probas]\n",
       "Index: []"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query(\"probabilidades_1>0.5 & clase_pred==0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clase_real</th>\n",
       "      <th>clase_pred</th>\n",
       "      <th>probabilidades_0</th>\n",
       "      <th>probabilidades_1</th>\n",
       "      <th>sum_probas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [clase_real, clase_pred, probabilidades_0, probabilidades_1, sum_probas]\n",
       "Index: []"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query(\"probabilidades_0>0.5 & clase_pred==1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Curva Precisión (Precission-Recall Curve)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def probabilidades_a_clases(predicciones_probabilidades, umbral=0.5):\n",
    "    predicciones = np.zeros([len(predicciones_probabilidades), ])\n",
    "    predicciones[predicciones_probabilidades[:,1]>=umbral] = 1\n",
    "    return predicciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[8.70591400e-01, 1.29408600e-01],\n",
       "       [5.17698173e-09, 9.99999995e-01],\n",
       "       [6.84140570e-03, 9.93158594e-01],\n",
       "       [9.96548386e-01, 3.45161387e-03],\n",
       "       [9.98625864e-01, 1.37413624e-03],\n",
       "       [5.76616310e-10, 9.99999999e-01],\n",
       "       [9.87876447e-13, 1.00000000e+00],\n",
       "       [4.47111851e-03, 9.95528881e-01],\n",
       "       [9.96017558e-01, 3.98244193e-03],\n",
       "       [9.80830300e-01, 1.91697004e-02]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicciones_probabilidades[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 1., 1., 0., 0., 1., 1., 1., 0., 0.])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probabilidades_a_clases(predicciones_probabilidades, umbral=0.90)[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "908b202eddea467d9526f804d6a240e8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=0.01, description='umbral', max=0.99, min=0.01, step=0.01), Output()),…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from ipywidgets import widgets, fixed, interact\n",
    "@interact(umbral=widgets.FloatSlider(min=0.01, max=0.99, step=0.01, value=0.01))\n",
    "def evaluar_umbral(umbral):\n",
    "    predicciones_en_umbral = probabilidades_a_clases(predicciones_probabilidades, umbral)\n",
    "    sensibilidad_umbral = metrics.recall_score(clases_reales, predicciones_en_umbral)\n",
    "    fpr_umbral = fpr(clases_reales, predicciones_en_umbral)\n",
    "    precision_umbral = precision(clases_reales, predicciones_en_umbral) \n",
    "    print( \"\"\"\n",
    "    Precision: {:.3f}\n",
    "    Sensibilidad:{:.3f}\n",
    "    Ratio de Alarma: {:.3f}\n",
    "    \"\"\".format(\n",
    "        precision_umbral,\n",
    "        sensibilidad_umbral,\n",
    "        fpr_umbral\n",
    "    ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluar_umbral(umbral):\n",
    "    predicciones_en_umbral = probabilidades_a_clases(predicciones_probabilidades, umbral)\n",
    "    precision_umbral = precision(clases_reales, predicciones_en_umbral)\n",
    "    sensibilidad_umbral = metrics.recall_score(clases_reales, predicciones_en_umbral)\n",
    "    fpr_umbral = fpr(clases_reales, predicciones_en_umbral)\n",
    "    return precision_umbral, sensibilidad_umbral, fpr_umbral\n",
    "\n",
    "\n",
    "rango_umbral = np.linspace(0., 1., 1000)\n",
    "sensibilidad_umbrales = []\n",
    "precision_umbrales = []\n",
    "fpr_umbrales = []\n",
    "\n",
    "for umbral in rango_umbral:\n",
    "    precision_umbral, sensibilidad_umbral, fpr_umbral = evaluar_umbral(umbral)\n",
    "    precision_umbrales.append(precision_umbral)\n",
    "    sensibilidad_umbrales.append(sensibilidad_umbral)\n",
    "    fpr_umbrales.append(fpr_umbral)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(sensibilidad_umbrales, precision_umbrales);\n",
    "plt.ylabel(\"Precision\")\n",
    "plt.xlabel(\"Ratio de Verdaderos positivos (sensibilidad)\")\n",
    "plt.title(\"Curva Precision-Recall\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def grafica_precision_recall(clases_reales, predicciones_probabilidades):\n",
    "    precision_, recall_, _ = metrics.precision_recall_curve(\n",
    "        clases_reales, predicciones_probabilidades[:,1])\n",
    "\n",
    "    plt.step(recall_, precision_, color='b', alpha=0.2,\n",
    "         where='post')\n",
    "    plt.fill_between(recall_, precision_, step='post', alpha=0.2,\n",
    "                 color='b')\n",
    "\n",
    "    plt.xlabel('Recall')\n",
    "    plt.ylabel('Precision')\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlim([0.0, 1.05])\n",
    "    plt.title('Curva Precision-Recall');\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "grafica_precision_recall(clases_reales, predicciones_probabilidades)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Area bajo la curva (Area Under the Curve, ROC-AUC)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(fpr_umbrales, sensibilidad_umbrales);\n",
    "plt.xlabel(\"Ratio de Falsos positivos (FPR)\")\n",
    "plt.ylabel(\"Ratio de Verdaderos positivos (sensibilidad)\")\n",
    "plt.title(\"Curva ROC\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9636243386243386"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.roc_auc_score(clases_reales, predicciones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def grafica_curva_auc(clases_reales, predicciones, predicciones_probabilidades):\n",
    "    fpr, tpr, _ = metrics.roc_curve(clases_reales, predicciones_probabilidades[:,1])\n",
    "    roc_auc = metrics.roc_auc_score(clases_reales, predicciones)\n",
    "    plt.figure()\n",
    "\n",
    "    plt.plot(fpr, tpr, color='darkorange',\n",
    "         lw=2, label='Curva ROC (area = %0.2f)' % roc_auc)\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label=\"estimador aleatorio\")\n",
    "    \n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('FPR')\n",
    "    plt.ylabel('TPR (recall)')\n",
    "    plt.title('Curva ROC')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.show();\n",
    "\n",
    "grafica_curva_auc(clases_reales, predicciones, predicciones_probabilidades)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    Exactitud: 0.971\n",
      "    Precisión: 0.944\n",
      "    Sensibilidad: 0.937\n",
      "    Area bajo curva (AUC): 0.964\n",
      "    Puntuación F1: 0.959\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "def evaluar_modelo(clases_reales, predicciones, probabilidades):\n",
    "    exactitud = metrics.accuracy_score(clases_reales, predicciones)\n",
    "    precision = metrics.average_precision_score(clases_reales, predicciones)\n",
    "    sensibilidad = metrics.recall_score(clases_reales, predicciones)\n",
    "    roc_auc = metrics.roc_auc_score(clases_reales, predicciones)\n",
    "    f1 = metrics.f1_score(clases_reales, predicciones)\n",
    "    print(\"\"\"\n",
    "    Exactitud: {:.3f}\n",
    "    Precisión: {:.3f}\n",
    "    Sensibilidad: {:.3f}\n",
    "    Area bajo curva (AUC): {:.3f}\n",
    "    Puntuación F1: {:.3f}\n",
    "    \"\"\".format(\n",
    "        exactitud, \n",
    "        precision,\n",
    "        sensibilidad,\n",
    "        roc_auc,\n",
    "        f1\n",
    "    ))\n",
    "    \n",
    "evaluar_modelo(clases_reales, predicciones, predicciones_probabilidades)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<hr>\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.627417\n",
       "1    0.372583\n",
       "Name: objetivo, dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cancer_df.objetivo.value_counts(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluación en Dataset imbalanceado"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora vamos a usar un dataset con clases no balanceadas\n",
    "\n",
    "https://www.kaggle.com/c/GiveMeSomeCredit/data\n",
    "\n",
    "\n",
    ">Improve on the state of the art in credit scoring by predicting the probability that somebody will experience financial distress in the next two years. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "creditos_df = pd.read_csv(\"data/datos_creditos.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>impago_en_2_anos</th>\n",
       "      <th>deuda_credito</th>\n",
       "      <th>edad</th>\n",
       "      <th>n_veces_pagos_retrasados_30_59_dias</th>\n",
       "      <th>ratio_deuda_mensual_salario</th>\n",
       "      <th>salario</th>\n",
       "      <th>n_lineas_credito_y_prestamos</th>\n",
       "      <th>n_veces_pagos_retrasados_90_dias</th>\n",
       "      <th>n_hipotecas</th>\n",
       "      <th>n_veces_pagos_retrasados_60_89_dias</th>\n",
       "      <th>numero_personas_dependientes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.766127</td>\n",
       "      <td>45</td>\n",
       "      <td>2</td>\n",
       "      <td>0.802982</td>\n",
       "      <td>9120.0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.957151</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0.121876</td>\n",
       "      <td>2600.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0.658180</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0.085113</td>\n",
       "      <td>3042.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.233810</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0.036050</td>\n",
       "      <td>3300.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.907239</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>0.024926</td>\n",
       "      <td>63588.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   impago_en_2_anos  deuda_credito  edad  n_veces_pagos_retrasados_30_59_dias  \\\n",
       "0                 1       0.766127    45                                    2   \n",
       "1                 0       0.957151    40                                    0   \n",
       "2                 0       0.658180    38                                    1   \n",
       "3                 0       0.233810    30                                    0   \n",
       "4                 0       0.907239    49                                    1   \n",
       "\n",
       "   ratio_deuda_mensual_salario  salario  n_lineas_credito_y_prestamos  \\\n",
       "0                     0.802982   9120.0                            13   \n",
       "1                     0.121876   2600.0                             4   \n",
       "2                     0.085113   3042.0                             2   \n",
       "3                     0.036050   3300.0                             5   \n",
       "4                     0.024926  63588.0                             7   \n",
       "\n",
       "   n_veces_pagos_retrasados_90_dias  n_hipotecas  \\\n",
       "0                                 0            6   \n",
       "1                                 0            0   \n",
       "2                                 1            0   \n",
       "3                                 0            0   \n",
       "4                                 0            1   \n",
       "\n",
       "   n_veces_pagos_retrasados_60_89_dias  numero_personas_dependientes  \n",
       "0                                    0                           2.0  \n",
       "1                                    0                           1.0  \n",
       "2                                    0                           0.0  \n",
       "3                                    0                           0.0  \n",
       "4                                    0                           0.0  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "creditos_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150000, 11)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "creditos_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "impago_en_2_anos\n",
       "0    139974\n",
       "1     10026\n",
       "dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "creditos_df.groupby(\"impago_en_2_anos\").size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.93316\n",
       "1    0.06684\n",
       "Name: impago_en_2_anos, dtype: float64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "creditos_df[\"impago_en_2_anos\"].value_counts(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable_objetivo = \"impago_en_2_anos\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = creditos_df.drop(variable_objetivo, axis=1)\n",
    "y = creditos_df[variable_objetivo]\n",
    "\n",
    "X_train_credito, X_test_credito, y_train_credito, y_test_credito = train_test_split(\n",
    "    X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>deuda_credito</th>\n",
       "      <th>edad</th>\n",
       "      <th>n_veces_pagos_retrasados_30_59_dias</th>\n",
       "      <th>ratio_deuda_mensual_salario</th>\n",
       "      <th>salario</th>\n",
       "      <th>n_lineas_credito_y_prestamos</th>\n",
       "      <th>n_veces_pagos_retrasados_90_dias</th>\n",
       "      <th>n_hipotecas</th>\n",
       "      <th>n_veces_pagos_retrasados_60_89_dias</th>\n",
       "      <th>numero_personas_dependientes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27822</th>\n",
       "      <td>0.186299</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>0.450637</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85202</th>\n",
       "      <td>0.760346</td>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>0.149838</td>\n",
       "      <td>9883.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42217</th>\n",
       "      <td>0.101500</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0.175026</td>\n",
       "      <td>7735.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119958</th>\n",
       "      <td>0.009897</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0.713701</td>\n",
       "      <td>4400.0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37678</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7500.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        deuda_credito  edad  n_veces_pagos_retrasados_30_59_dias  \\\n",
       "27822        0.186299    55                                    0   \n",
       "85202        0.760346    55                                    1   \n",
       "42217        0.101500    39                                    0   \n",
       "119958       0.009897    64                                    0   \n",
       "37678        0.000000    64                                    0   \n",
       "\n",
       "        ratio_deuda_mensual_salario  salario  n_lineas_credito_y_prestamos  \\\n",
       "27822                      0.450637   4000.0                             5   \n",
       "85202                      0.149838   9883.0                             9   \n",
       "42217                      0.175026   7735.0                             5   \n",
       "119958                     0.713701   4400.0                            14   \n",
       "37678                      0.000000   7500.0                             3   \n",
       "\n",
       "        n_veces_pagos_retrasados_90_dias  n_hipotecas  \\\n",
       "27822                                  0            0   \n",
       "85202                                  0            0   \n",
       "42217                                  0            1   \n",
       "119958                                 0            2   \n",
       "37678                                  0            0   \n",
       "\n",
       "        n_veces_pagos_retrasados_60_89_dias  numero_personas_dependientes  \n",
       "27822                                     0                           0.0  \n",
       "85202                                     0                           0.0  \n",
       "42217                                     0                           0.0  \n",
       "119958                                    0                           1.0  \n",
       "37678                                     0                           0.0  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_credito.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.93316\n",
       "1    0.06684\n",
       "Name: impago_en_2_anos, dtype: float64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\LCM\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "modelo = LogisticRegression()\n",
    "modelo.fit(X_train_credito, y_train_credito)\n",
    "\n",
    "predicciones_creditos = modelo.predict(X_test_credito)\n",
    "clases_reales_creditos = y_test_credito\n",
    "predicciones_probabilidades_creditos = modelo.predict_proba(X_test_credito)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, ..., 0, 0, 0], dtype=int64)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicciones_creditos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    Exactitud: 0.934\n",
      "    Precisión: 0.072\n",
      "    Sensibilidad: 0.014\n",
      "    Area bajo curva (AUC): 0.506\n",
      "    Puntuación F1: 0.027\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "evaluar_modelo(clases_reales_creditos, predicciones_creditos, predicciones_probabilidades_creditos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[41976,    44],\n",
       "       [ 2939,    41]], dtype=int64)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(clases_reales_creditos, predicciones_creditos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10026"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#len(creditos_df[creditos_df[variable_objetivo]==1])\n",
    "creditos_df.impago_en_2_anos.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "85"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicciones_creditos.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grafica_precision_recall(clases_reales_creditos, predicciones_probabilidades_creditos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grafica_curva_auc(clases_reales_creditos, predicciones_creditos, predicciones_probabilidades_creditos)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tratamiento para un Dataset imbalanceado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn import metrics\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "creditos_df = pd.read_csv(\"data/datos_creditos.csv\")\n",
    "\n",
    "variable_objetivo = \"impago_en_2_anos\"\n",
    "\n",
    "X = creditos_df.drop(variable_objetivo, axis=1)\n",
    "y = creditos_df[variable_objetivo]\n",
    "\n",
    "X_train_credito, X_test_credito, y_train_credito, y_test_credito = train_test_split(X, y, test_size=0.3, random_state=666)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\LCM\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "modelo = LogisticRegression()\n",
    "modelo.fit(X_train_credito, y_train_credito)\n",
    "\n",
    "predicciones = modelo.predict(X_test_credito)\n",
    "clases_reales = y_test_credito\n",
    "predicciones_probabilidades = modelo.predict_proba(X_test_credito)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Matriz de confusión**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix:\n",
      " [[41874    46]\n",
      " [ 3039    41]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "conf_mat = confusion_matrix(y_true=y_test_credito, y_pred=predicciones)\n",
    "print('Confusion matrix:\\n', conf_mat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-71-be047c04fbfc>:6: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_xticklabels([''] + labels)\n",
      "<ipython-input-71-be047c04fbfc>:7: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_yticklabels([''] + labels)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = ['Class 0', 'Class 1']\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "cax = ax.matshow(conf_mat, cmap=plt.cm.Blues)\n",
    "fig.colorbar(cax)\n",
    "ax.set_xticklabels([''] + labels)\n",
    "ax.set_yticklabels([''] + labels)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Expected')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Resampling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Una técnica ampliamente adoptada para tratar con conjuntos de datos altamente **desbalanceados** es el remuestreo. Consiste en eliminar muestras de la clase mayoritaria (submuestreo - *undersampling*) y / o agregar más ejemplos de la clase minoritaria (sobremuestreo - *oversampling*)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![revit](https://raw.githubusercontent.com/rafjaa/machine_learning_fecib/master/src/static/img/resampling.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A pesar de las ventajas de conseguir el equilibrio en la variable objetivo, estas técnicas también tienen sus puntos débiles (nada es gratis). La implementación más simple del muestreo excesivo es duplicar registros aleatorios de la clase minoritaria, lo que puede causar un ajuste excesivo. En el submuestreo, la técnica más simple consiste en eliminar registros aleatorios de la clase mayoritaria, lo que puede causar la pérdida de información.\n",
    "\n",
    "Implementemos un ejemplo básico, que utiliza el método `DataFrame.sample` para obtener muestras aleatorias de cada clase:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Undersampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = \"impago_en_2_anos\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "impago_en_2_anos\n",
       "0    139974\n",
       "1     10026\n",
       "dtype: int64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "creditos_df.groupby(target).size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Class count\n",
    "count_class_0, count_class_1 = creditos_df[target].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Divide by class\n",
    "df_class_0 = creditos_df[creditos_df[target] == 0]\n",
    "df_class_1 = creditos_df[creditos_df[target] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random under-sampling:\n",
      "1    10026\n",
      "0    10026\n",
      "Name: impago_en_2_anos, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYQAAAEFCAYAAADjUZCuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAASBUlEQVR4nO3de5DdZX3H8feniQQQETALQgIm1ngBOmqJGOplnNIpsdaGP8TGG9GhkxkGWq3WGtQR6pgOdnpBRmEm44UgFEiRSqqixVjGOlLiIiKGGMmIkG0irAgYtVwC3/5xnsDJZneT7NnsJuz7NXPm/M739zy/892w7Oec53cuqSokSfqdyW5AkrRvMBAkSYCBIElqDARJEmAgSJIaA0GSBBgI0rhK0pdkQ5IDJ7uX4SSZkeTHSY6c7F607zEQtN9J8vYk/Ul+nWRLkhuSvHYC7reSvGgXw5YBX6iqR9qcm5L8xd7ubSRD77+qHgU+D3xosnrSvstA0H4lyfuBi4C/B44CjgMuARZNYltA59E3sAS4YhyPOX28jtXlX4ElrV/pKQaC9htJngt8HDinqq6rqt9U1eNV9R9V9cE2ZkaSi5JsbpeLtv/hS/LuJN8ZcsynHvUnuSzJZ5J8NcnWJLck+d2279ttyu3tmcmfD9Piq4GHqmqgzVkOvA74dJvz6Vb/VJJNSX6V5NYkr+vq54Ik1ya5IsmvgHcnmZvk262nb7Yer+iasyDJd5M8lOT2JG8Y7f5bfw8CC8b+X0PPRAaC9ienAAcC/z7KmI/Q+UP3CuDlwMnAR/fgPt4G/B1wOLARWA5QVa9v+19eVYdU1TXDzP09YMP2G1X1EeC/gXPbnHPbru+1/o6g82j934acc1gEXAscBlzZxqwFngdcALxr+8Aks4CvAp9ox/sb4EtJ+ka5f4D1dP59pKcYCNqfPA/4RVVtG2XMO4CPV9X9VTVI54/7u0YZP9R1VbW23ceVdP5w767DgK27GlRVV1TVA1W1rar+CZgBvKRryM1V9eWqehLoA14FfKyqHquq7wCru8a+E/haVX2tqp6sqhuBfuBPdtHG1tav9BQDQfuTB4CZu1hXPwa4p+v2Pa22u37etf1b4JA9mPsg8JxdDUrygSTrkzyc5CHgucDMriGburaPAX5ZVb8dYf8LgDPactFD7XivBY7eRRvPAR7aVa+aWgwE7U9uBh4BTh9lzGY6fyS3O67VAH4DHLx9R5Lnj3N/PwRePKS2w8cJt/MFHwLeChxeVYcBDwMZYc4W4IgkB3fVju3a3gR8saoO67o8u6ouHO7+u7wMuH03fiZNIQaC9htV9TDwMeAzSU5PcnCSZyV5Y5J/aMOuAj7a3g8ws43ffgL2duCEJK9oa/YX7GEL9wEvHGX/WuCwtq4/0pznANuAQWB6ko8Bh450wKq6h84S0AVJDkhyCvDmriFXAG9OclqSaUkOTPKGJLNH6rn1dwTwP6P8LJqCDATtV6rqn4H30zlRPEjnEfK5wJfbkE/Q+QP6Q+AO4PutRlX9hM6rlL4J3AXs8Iqj3XABsLItzbx1mN4eAy6js66/3aeAtyR5MMnFwDeAG4Cf0FnOeoQdl4CG8w46J9QfaD/LNcCj7T430TkJ/WGe/vf4IE//vz30/gHeDqxs70mQnhK/IEcaP0n66Lyy55VV9X976T6uAX5cVeePYe4MOs+UXl9V9497c9qvGQjSPi7Jq4BfAncDf0zn2dApVXXbZPalZ5698S5ISePr+cB1dF52OwCcbRhob/AZgiQJ8KSyJKkxECRJwH58DmHmzJk1Z86cyW5DkvYrt9566y+qqm+4ffttIMyZM4f+/v7JbkOS9itJ7hlpn0tGkiTAQJAkNQaCJAkwECRJjYEgSQJ2IxCSfD7J/Ul+1FU7IsmNSe5q14d37TsvycYkG5Kc1lU/Kckdbd/FSdLqM5Jc0+q3JJkzzj+jJGk37M4zhMuAhUNqy4A1VTUPWNNuk+R4YDFwQptzSZJpbc6lwFJgXrtsP+ZZwINV9SLgX4BPjvWHkSSN3S4Doaq+TeeTFrstAla27ZU8/Q1Wi4Crq+rRqrqbzpeUn5zkaODQqrq5Oh+edPmQOduPdS1w6vZnD5KkiTPWN6YdVVVbAKpqS5IjW30WO34L00CrPd62h9a3z9nUjrUtycO0L1MfY2/7lDnLvjrZLTyj/OzCN012C88Y/m6Or2fC7+Z4n1Qe7pF9jVIfbc7OB0+WJulP0j84ODjGFiVJwxlrINzXloFo19u/eWmAHb8AfDadLzgfaNtD6zvMSTIdeC47L1EBUFUrqmp+Vc3v6xv2ozgkSWM01kBYDSxp20uA67vqi9srh+bSOXm8ti0vbU2yoJ0fOHPInO3HegvwrfJLGiRpwu3yHEKSq4A3ADOTDADnAxcCq5KcBdwLnAFQVeuSrALuBLYB51TVE+1QZ9N5xdJBdL5k/IZW/xzwxSQb6TwzWDwuP5kkaY/sMhCq6m0j7Dp1hPHLgeXD1PuBE4epP0ILFEnS5PGdypIkwECQJDUGgiQJMBAkSY2BIEkCDARJUmMgSJIAA0GS1BgIkiTAQJAkNQaCJAkwECRJjYEgSQIMBElSYyBIkgADQZLUGAiSJMBAkCQ1BoIkCTAQJEmNgSBJAgwESVJjIEiSAANBktQYCJIkwECQJDUGgiQJMBAkSY2BIEkCDARJUmMgSJIAA0GS1PQUCEn+Osm6JD9KclWSA5MckeTGJHe168O7xp+XZGOSDUlO66qflOSOtu/iJOmlL0nSnhtzICSZBfwVML+qTgSmAYuBZcCaqpoHrGm3SXJ8238CsBC4JMm0drhLgaXAvHZZONa+JElj0+uS0XTgoCTTgYOBzcAiYGXbvxI4vW0vAq6uqker6m5gI3BykqOBQ6vq5qoq4PKuOZKkCTLmQKiq/wX+EbgX2AI8XFX/CRxVVVvamC3AkW3KLGBT1yEGWm1W2x5alyRNoF6WjA6n86h/LnAM8Owk7xxtyjC1GqU+3H0uTdKfpH9wcHBPW5YkjaKXJaM/Au6uqsGqehy4DvgD4L62DES7vr+NHwCO7Zo/m84S00DbHlrfSVWtqKr5VTW/r6+vh9YlSUP1Egj3AguSHNxeFXQqsB5YDSxpY5YA17ft1cDiJDOSzKVz8nhtW1bammRBO86ZXXMkSRNk+lgnVtUtSa4Fvg9sA24DVgCHAKuSnEUnNM5o49clWQXc2cafU1VPtMOdDVwGHATc0C6SpAk05kAAqKrzgfOHlB+l82xhuPHLgeXD1PuBE3vpRZLUG9+pLEkCDARJUmMgSJIAA0GS1BgIkiTAQJAkNQaCJAkwECRJjYEgSQIMBElSYyBIkgADQZLUGAiSJMBAkCQ1BoIkCTAQJEmNgSBJAgwESVJjIEiSAANBktQYCJIkwECQJDUGgiQJMBAkSY2BIEkCDARJUmMgSJIAA0GS1BgIkiTAQJAkNQaCJAkwECRJjYEgSQJ6DIQkhyW5NsmPk6xPckqSI5LcmOSudn141/jzkmxMsiHJaV31k5Lc0fZdnCS99CVJ2nO9PkP4FPD1qnop8HJgPbAMWFNV84A17TZJjgcWAycAC4FLkkxrx7kUWArMa5eFPfYlSdpDYw6EJIcCrwc+B1BVj1XVQ8AiYGUbthI4vW0vAq6uqker6m5gI3BykqOBQ6vq5qoq4PKuOZKkCdLLM4QXAoPAF5LcluSzSZ4NHFVVWwDa9ZFt/CxgU9f8gVab1baH1neSZGmS/iT9g4ODPbQuSRqql0CYDvw+cGlVvRL4DW15aATDnReoUeo7F6tWVNX8qprf19e3p/1KkkbRSyAMAANVdUu7fS2dgLivLQPRru/vGn9s1/zZwOZWnz1MXZI0gcYcCFX1c2BTkpe00qnAncBqYEmrLQGub9urgcVJZiSZS+fk8dq2rLQ1yYL26qIzu+ZIkibI9B7n/yVwZZIDgJ8C76ETMquSnAXcC5wBUFXrkqyiExrbgHOq6ol2nLOBy4CDgBvaRZI0gXoKhKr6ATB/mF2njjB+ObB8mHo/cGIvvUiSeuM7lSVJgIEgSWoMBEkSYCBIkhoDQZIEGAiSpMZAkCQBBoIkqTEQJEmAgSBJagwESRJgIEiSGgNBkgQYCJKkxkCQJAEGgiSpMRAkSYCBIElqDARJEmAgSJIaA0GSBBgIkqTGQJAkAQaCJKkxECRJgIEgSWoMBEkSYCBIkhoDQZIEGAiSpMZAkCQBBoIkqek5EJJMS3Jbkq+020ckuTHJXe368K6x5yXZmGRDktO66icluaPtuzhJeu1LkrRnxuMZwnuB9V23lwFrqmoesKbdJsnxwGLgBGAhcEmSaW3OpcBSYF67LByHviRJe6CnQEgyG3gT8Nmu8iJgZdteCZzeVb+6qh6tqruBjcDJSY4GDq2qm6uqgMu75kiSJkivzxAuAv4WeLKrdlRVbQFo10e2+ixgU9e4gVab1baH1iVJE2jMgZDkT4H7q+rW3Z0yTK1GqQ93n0uT9CfpHxwc3M27lSTtjl6eIbwG+LMkPwOuBv4wyRXAfW0ZiHZ9fxs/ABzbNX82sLnVZw9T30lVraiq+VU1v6+vr4fWJUlDjTkQquq8qppdVXPonCz+VlW9E1gNLGnDlgDXt+3VwOIkM5LMpXPyeG1bVtqaZEF7ddGZXXMkSRNk+l445oXAqiRnAfcCZwBU1bokq4A7gW3AOVX1RJtzNnAZcBBwQ7tIkibQuARCVd0E3NS2HwBOHWHccmD5MPV+4MTx6EWSNDa+U1mSBBgIkqTGQJAkAQaCJKkxECRJgIEgSWoMBEkSYCBIkhoDQZIEGAiSpMZAkCQBBoIkqTEQJEmAgSBJagwESRJgIEiSGgNBkgQYCJKkxkCQJAEGgiSpMRAkSYCBIElqDARJEmAgSJIaA0GSBBgIkqTGQJAkAQaCJKkxECRJgIEgSWoMBEkSYCBIkpoxB0KSY5P8V5L1SdYleW+rH5HkxiR3tevDu+acl2Rjkg1JTuuqn5Tkjrbv4iTp7ceSJO2pXp4hbAM+UFUvAxYA5yQ5HlgGrKmqecCadpu2bzFwArAQuCTJtHasS4GlwLx2WdhDX5KkMRhzIFTVlqr6ftveCqwHZgGLgJVt2Erg9La9CLi6qh6tqruBjcDJSY4GDq2qm6uqgMu75kiSJsi4nENIMgd4JXALcFRVbYFOaABHtmGzgE1d0wZabVbbHlqXJE2gngMhySHAl4D3VdWvRhs6TK1GqQ93X0uT9CfpHxwc3PNmJUkj6ikQkjyLThhcWVXXtfJ9bRmIdn1/qw8Ax3ZNnw1sbvXZw9R3UlUrqmp+Vc3v6+vrpXVJ0hC9vMoowOeA9VX1z127VgNL2vYS4Pqu+uIkM5LMpXPyeG1bVtqaZEE75pldcyRJE2R6D3NfA7wLuCPJD1rtw8CFwKokZwH3AmcAVNW6JKuAO+m8QumcqnqizTsbuAw4CLihXSRJE2jMgVBV32H49X+AU0eYsxxYPky9HzhxrL1IknrnO5UlSYCBIElqDARJEmAgSJIaA0GSBBgIkqTGQJAkAQaCJKkxECRJgIEgSWoMBEkSYCBIkhoDQZIEGAiSpMZAkCQBBoIkqTEQJEmAgSBJagwESRJgIEiSGgNBkgQYCJKkxkCQJAEGgiSpMRAkSYCBIElqDARJEmAgSJIaA0GSBBgIkqTGQJAkAQaCJKkxECRJwD4UCEkWJtmQZGOSZZPdjyRNNftEICSZBnwGeCNwPPC2JMdPbleSNLXsE4EAnAxsrKqfVtVjwNXAoknuSZKmlOmT3UAzC9jUdXsAePXQQUmWAkvbzV8n2TABvU0VM4FfTHYTu5JPTnYHmgT+bo6vF4y0Y18JhAxTq50KVSuAFXu/naknSX9VzZ/sPqSh/N2cOPvKktEAcGzX7dnA5knqRZKmpH0lEL4HzEsyN8kBwGJg9ST3JElTyj6xZFRV25KcC3wDmAZ8vqrWTXJbU41LcdpX+bs5QVK101K9JGkK2leWjCRJk8xAkCQBBoIkqdknTipL0nZJXkrnkwpm0Xk/0mZgdVWtn9TGpgCfIWgHSd4z2T1o6kryITofXRNgLZ2XpAe4yg+93Pt8lZF2kOTeqjpusvvQ1JTkJ8AJVfX4kPoBwLqqmjc5nU0NLhlNQUl+ONIu4KiJ7EUa4kngGOCeIfWj2z7tRQbC1HQUcBrw4JB6gO9OfDvSU94HrElyF09/4OVxwIuAcyerqanCQJiavgIcUlU/GLojyU0T3o3UVNXXk7yYzkfiz6LzIGUA+F5VPTGpzU0BnkOQJAG+ykiS1BgIkiTAQJAkNQaCJAkwECRJzf8DCCrmEv1qQg4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_class_0_under = df_class_0.sample(count_class_1)\n",
    "df_train_under = pd.concat([df_class_0_under, df_class_1], axis=0)\n",
    "\n",
    "print('Random under-sampling:')\n",
    "print(df_train_under[target].value_counts())\n",
    "\n",
    "df_train_under[target].value_counts().plot(kind='bar', title='Count (target)');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Oversampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random over-sampling:\n",
      "1    139974\n",
      "0    139974\n",
      "Name: impago_en_2_anos, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_class_1_over = df_class_1.sample(count_class_0, replace=True)\n",
    "df_train_over = pd.concat([df_class_0, df_class_1_over], axis=0)\n",
    "\n",
    "print('Random over-sampling:')\n",
    "print(df_train_over[target].value_counts())\n",
    "\n",
    "df_train_over[target].value_counts().plot(kind='bar', title='Count (target)');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Python imbalanced-learn module"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para los datos imbalanceados se han propuesto varias técnicas de reajuste más sofisticadas.\n",
    "\n",
    "Por ejemplo, podemos agrupar los registros de la clase mayoritaria y realizar el submuestreo eliminando los registros de cada grupo, buscando preservar la información. En el muestreo excesivo, en lugar de crear copias exactas de los registros de la clase minoritaria, podemos introducir pequeñas variaciones en esas copias, creando muestras sintéticas más diversas.\n",
    "\n",
    "Apliquemos algunas de estas técnicas de remuestreo, utilizando la biblioteca de Python [imbalanced-learn](https://imbalanced-learn.org/en/stable/index.html). Es compatible con scikit-learn y forma parte de los proyectos de scikit-learn-contrib."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Under con **imblearn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = creditos_df.drop(target, axis = 1)\n",
    "y = creditos_df[target]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import sys\n",
    "# !conda install --yes --prefix {sys.prefix} imblearn\n",
    "# !{sys.executable} -m pip install imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "conda install -c conda-forge imbalanced-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0, 10026), (1, 10026)]\n"
     ]
    }
   ],
   "source": [
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from collections import Counter\n",
    "\n",
    "rus = RandomUnderSampler(random_state=0)\n",
    "X_rus, y_rus = rus.fit_resample(X, y)\n",
    "print(sorted(Counter(y_rus).items()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((20052, 10), (20052,), (150000, 10))"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_rus.shape, y_rus.shape, X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "positivos 10026 y negativos 10026\n"
     ]
    }
   ],
   "source": [
    "negativos = (y_rus==0).sum()\n",
    "positivos = (y_rus==1).sum()\n",
    "print(\"positivos {} y negativos {}\".format(negativos, positivos))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Over con **imblearn**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46250 nuevas observaciones aleatorias\n"
     ]
    }
   ],
   "source": [
    "from imblearn.over_sampling import RandomOverSampler\n",
    "\n",
    "ros = RandomOverSampler()\n",
    "X_ros, y_ros = ros.fit_sample(X_train_credito, y_train_credito)\n",
    "\n",
    "print(X_ros.shape[0] - X.shape[0], 'nuevas observaciones aleatorias')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "positivos 98125 y negativos 98125\n"
     ]
    }
   ],
   "source": [
    "negativos = (y_ros==0).sum()\n",
    "positivos = (y_ros==1).sum()\n",
    "print(\"positivos {} y negativos {}\".format(negativos, positivos))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_credito, X_test_credito, y_train_credito, y_test_credito = train_test_split(X_ros, y_ros, test_size=0.3, random_state=666)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "modelo = LogisticRegression()\n",
    "modelo.fit(X_ros, y_ros)\n",
    "\n",
    "predicciones = modelo.predict(X_test_credito)\n",
    "clases_reales = y_test_credito\n",
    "predicciones_probabilidades = modelo.predict_proba(X_test_credito)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    Exactitud: 0.728\n",
      "    Precisión: 0.692\n",
      "    Sensibilidad: 0.567\n",
      "    Area bajo curva (AUC): 0.728\n",
      "    Puntuación F1: 0.677\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "evaluar_modelo(clases_reales, predicciones, predicciones_probabilidades)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Under-sampling: Cluster Centroids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Esta técnica realiza un submuestreo generando centroides basados en métodos de agrupamiento. Los datos se agruparán previamente por similitud, a fin de preservar la información.\n",
    "\n",
    "En este ejemplo, probaremos el {0: 1000} para el parámetro **ratio**, para preservar 10 elementos de la clase mayoritaria (0) y toda la clase minoritaria (1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.under_sampling import ClusterCentroids\n",
    "\n",
    "cc = ClusterCentroids(random_state=0)\n",
    "X_cc, y_cc = cc.fit_sample(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "negativos = (y_cc==0).sum()\n",
    "positivos = (y_cc==1).sum()\n",
    "print(\"positivos {} y negativos {}\".format(negativos, positivos))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Over-sampling: SMOTE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SMOTE** (técnica de sobremuestreo de minorías sintéticas) consiste en sintetizar elementos para la clase minoritaria, basados en aquellos que ya existen. Funciona de forma aleatoria al dibujar un punto de la clase minoritaria y calcular los vecinos más cercanos a k para este punto. Los puntos sintéticos se añaden entre el punto elegido y sus vecinos.\n",
    "\n",
    "![revit](https://raw.githubusercontent.com/rafjaa/machine_learning_fecib/master/src/static/img/smote.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En fucnión a la clase minoritaria"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.combine import SMOTEENN\n",
    "\n",
    "smote_enn = SMOTEENN(random_state=0)\n",
    "X_sm, y_sm = smote_enn.fit_sample(X, y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "negativos = (y_sm==0).sum()\n",
    "positivos = (y_sm==1).sum()\n",
    "print(\"positivos {} y negativos {}\".format(negativos, positivos))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "creditos_df.groupby(target).size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable_objetivo = \"impago_en_2_anos\"\n",
    "\n",
    "X = X_sm\n",
    "y = y_sm\n",
    "\n",
    "X_train_credito, X_test_credito, y_train_credito, y_test_credito = train_test_split(X, y, test_size=0.3, random_state=666)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "modelo = LogisticRegression()\n",
    "modelo.fit(X_train_credito, y_train_credito)\n",
    "\n",
    "predicciones = modelo.predict(X_test_credito)\n",
    "clases_reales = y_test_credito\n",
    "predicciones_probabilidades = modelo.predict_proba(X_test_credito)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "conf_mat = confusion_matrix(y_true=y_test_credito, y_pred=predicciones)\n",
    "print('Confusion matrix:\\n', conf_mat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = ['Class 0', 'Class 1']\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "cax = ax.matshow(conf_mat, cmap=plt.cm.Blues)\n",
    "fig.colorbar(cax)\n",
    "ax.set_xticklabels([''] + labels)\n",
    "ax.set_yticklabels([''] + labels)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Expected')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluar_modelo(clases_reales, predicciones, predicciones_probabilidades)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Over-sampling followed by under-sampling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora, haremos una combinación de muestreo excesivo y submuestreo, utilizando las técnicas de enlaces SMOTE y Tomek:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.combine import SMOTETomek\n",
    "\n",
    "smote_tomek = SMOTETomek(random_state=0)\n",
    "X_smt, y_smt = smote_tomek.fit_sample(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "negativos = (y_smt==0).sum()\n",
    "positivos = (y_smt==1).sum()\n",
    "print(\"positivos {} y negativos {}\".format(negativos, positivos))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recommended reading\n",
    "The imbalanced-learn documentation:\n",
    "\n",
    "http://contrib.scikit-learn.org/imbalanced-learn/stable/index.html\n",
    "\n",
    "The imbalanced-learn GitHub:\n",
    "\n",
    "https://github.com/scikit-learn-contrib/imbalanced-learn\n",
    "\n",
    "Comparison of the combination of over- and under-sampling algorithms:\n",
    "\n",
    "http://contrib.scikit-learn.org/imbalanced-learn/stable/auto_examples/combine/plot_comparison_combine.html\n",
    "\n",
    "Chawla, Nitesh V., et al. \"SMOTE: synthetic minority over-sampling technique.\" Journal of artificial intelligence research 16 (2002):\n",
    "https://www.jair.org/media/953/live-953-2037-jair.pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "widgets": {
   "state": {
    "faecd23e356c4a88b55f22e7d579b0f3": {
     "views": [
      {
       "cell_index": 34
      }
     ]
    }
   },
   "version": "1.2.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}